#!/usr/bin/env ruby

# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to?(:realpath)
  class File #:nodoc:
    def self.realpath(path)
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end

$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rubygems'
require 'gli'
require 'myfc_cloud'
require 'awesome_print'

include GLI::App

program_desc 'Command line application to deploy and manage webapps on Amazon Web Services'

version MyfcCloud::VERSION

desc 'Targets the sandbox environment (default)'
switch [:S,:sandbox], :negatable => false

desc 'Targets the production environment'
switch [:P,:production], :negatable => false

desc 'Targets the stage environment'
switch [:T,:stage], :negatable => false

desc 'Path to the configuration file'
default_value File.join(File.expand_path('..', File.dirname(__FILE__)), 'myfc_cloud.yml') # TODO how to find it via gem?
arg_name 'PATH_TO_CONFIG_FILE'
flag [:C,:config_file]

desc 'Checks if all required configuration is properly set and all requirements are met'
skips_pre
command 'check' do |c|
  c.action do |global_options,options,args|
    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"
    MyfcCloud::Commands::Check.new(global_options[:configuration]).run
  end
end

desc 'Deploys your application to the selected environment'
command 'deploy' do |c|
  c.desc 'To set the application in maintenance mode during deploy or not'
  c.default_value 'false'
  c.arg_name 'false|true'
  c.flag :maintenance

  c.action do |global_options,options,args|
    MyfcCloud::Commands::Deploy.new(
      global_options[:configuration],
      :maintenance => options[:maintenance]
    ).run
  end
end

desc 'Lists information about your Auto Scaling Group'
command 'scaling_group:info' do |c|
  c.action do |global_options,options,args|
    ap MyfcCloud::Commands::ScalingGroup.new(
      global_options[:configuration]
    ).info
  end
end

desc "'Freezes' your ASG"
long_desc <<-EOS
Updates the Auto Scaling Group causing it to not increment or decrement the number of instances no matter what happens. In effect, sets the min_size, max_size and desired_capacity to the same value. By default sets them to the current desired_capacity, but you can pass a size flag to specify the number of instances you want.
EOS
command 'scaling_group:freeze' do |c|
  c.desc 'the number of instances to freeze with (defaults to the current desired_capacity)'
  c.arg_name 'integer'
  c.flag :size

  c.action do |global_options,options,args|
    ap MyfcCloud::Commands::ScalingGroup.new(
      global_options[:configuration]
    ).freeze(options[:size])
  end
end

desc "Checks if all instances are InService AND Healthy on your ASG"
long_desc <<-EOS
Returns true if all instances registered on your Auto Scaling Group are currently InService and Healthy.
EOS
command 'scaling_group:check' do |c|
  c.action do |global_options,options,args|
    ap MyfcCloud::Commands::ScalingGroup.new(
      global_options[:configuration]
    ).check
  end
end

desc "Updates some attributes of your ASG"
long_desc <<-EOS
Updates the Auto Scaling Group's min_size, max_size, desired_capacity and launch_configuration, either one at a time or all together.
EOS
command 'scaling_group:update' do |c|
  c.desc 'minimum number of instances'
  c.arg_name 'integer'
  c.flag :min_size

  c.desc 'maximum number of instances'
  c.arg_name 'integer'
  c.flag :max_size

  c.desc 'desired number of active instances'
  c.arg_name 'integer'
  c.flag :desired_capacity

  c.desc 'launch configuration name'
  c.arg_name 'string'
  c.flag :launch_configuration

  c.action do |global_options,options,args|
    ap MyfcCloud::Commands::ScalingGroup.new(
      global_options[:configuration]
    ).update(options)
  end
end


pre do |global_options,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  environment = :sandbox
  environment = :production if global_options[:P] || global_options[:production]
  environment = :stage if global_options[:T] || global_options[:stage]

  global_options[:configuration] = MyfcCloud::Configuration.new(global_options[:C], environment)
  true
end

post do |global_options,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
